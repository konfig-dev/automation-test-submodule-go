/*
Test Automation (No submodules)

SDKs (no submodules) to test automation workflows.

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package automationtestwithsubmodules

import (
	"encoding/json"
)

// HelloResponse struct for HelloResponse
type HelloResponse struct {
	// The greeting message
	Message string `json:"message"`
}

// NewHelloResponse instantiates a new HelloResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelloResponse(message string) *HelloResponse {
	this := HelloResponse{}
	this.Message = message
	return &this
}

// NewHelloResponseWithDefaults instantiates a new HelloResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelloResponseWithDefaults() *HelloResponse {
	this := HelloResponse{}
	return &this
}

// GetMessage returns the Message field value
func (o *HelloResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *HelloResponse) GetMessageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *HelloResponse) SetMessage(v string) {
	o.Message = v
}

func (o HelloResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableHelloResponse struct {
	value *HelloResponse
	isSet bool
}

func (v NullableHelloResponse) Get() *HelloResponse {
	return v.value
}

func (v *NullableHelloResponse) Set(val *HelloResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHelloResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHelloResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelloResponse(val *HelloResponse) *NullableHelloResponse {
	return &NullableHelloResponse{value: val, isSet: true}
}

func (v NullableHelloResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelloResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


